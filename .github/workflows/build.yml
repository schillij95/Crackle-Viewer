name: Build Application

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write
  
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2019]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install PyInstaller and Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build with PyInstaller
      run: |
        pyinstaller crackle_viewer.spec
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-Executable
        path: dist/*
    - name: Delete Old Releases and Create New Release
      id: create_release
      uses: actions/github-script@v5
      with:
        script: |
          const latestCommitSha = process.env.GITHUB_SHA.substring(0, 7); // Use the first 7 characters of the SHA
          const releaseName = `release-${latestCommitSha}`;
          const tagName = `v1.0.0-${latestCommitSha}`; // Prefix to make it a valid tag
    
          // Get all releases
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
    
          // Delete any releases that do not match the current commit SHA
          for (const release of releases.data) {
            if (release.name !== releaseName) {
              console.log(`Deleting release: ${release.id}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
            }
          }
    
          // Create a new release based on the current commit SHA
          console.log('Creating new release');
          const newRelease = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName, // Use the new tag format
            name: releaseName,
            draft: false,
            prerelease: false,
            target_commitish: latestCommitSha
          });
    
          core.setOutput('upload_url', newRelease.data.upload_url);
    
    - name: Zip Executable and Dependencies
      shell: pwsh
      run: |
        $osType = "${{ runner.os }}"
        if ($osType -eq "Windows") {
          # PowerShell command for Windows
          Compress-Archive -Path dist/* -DestinationPath "$osType-Executable.zip"
        } else {
          # Use PowerShell's native capabilities to handle Linux/macOS zipping if necessary
          # Moving to a shell script file if needed
          & bash -c "cd dist && zip -r ../$osType-Executable.zip ./* && cd .."
        }
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ runner.os }}-Executable.zip
        asset_name: ${{ runner.os }}.zip
        asset_content_type: application/zip
