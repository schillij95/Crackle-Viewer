name: Build Application

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2019]
        include:
          - os: ubuntu-20.04
            create_release: true
          - os: macos-12
            create_release: false
          - os: windows-2019
            create_release: false
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install PyInstaller and Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build with PyInstaller
      run: |
        pyinstaller crackle_viewer.spec

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-Executable
        path: dist/*

    # Step to create/delete the release is only run on one OS (Ubuntu in this case)
    - name: Delete Old Release and Create New Release
      if: matrix.create_release == 'true'
      id: create_release
      uses: actions/github-script@v5
      with:
        script: |
          const tag = 'latest-release';
          const latestCommit = process.env.GITHUB_SHA;
          let release;

          try {
            release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
          } catch (error) {
            if (error.status === 404) {
              console.log('No existing release found with the tag, creating a new one.');
            } else {
              throw error;
            }
          }

          if (release) {
            console.log(`Deleting existing release: ${release.data.id}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            });
            console.log(`Deleted release: ${release.data.id}`);
          }

          console.log('Creating new release');
          const newRelease = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: 'Latest Release',
            draft: false,
            prerelease: false,
            target_commitish: latestCommit
          });

          core.setOutput('upload_url', newRelease.data.upload_url);

    - name: Zip Executable and Dependencies
      run: |
        if [[ "${{ matrix.os }}" == "Windows" ]]; then
          powershell Compress-Archive -Path dist/* -DestinationPath "${{ matrix.os }}-Executable.zip"
        else
          zip -r "${{ matrix.os }}-Executable.zip" dist/

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url || steps.create_release.outputs.upload_url_from_other_jobs }}
        asset_path: ${{ matrix.os }}-Executable.zip
        asset_name: ${{ matrix.os }}.zip
        asset_content_type: application/zip
